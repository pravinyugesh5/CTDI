1.
class Solution{
public:

  int primeSum(int N){
   int d,s=0;
   while(N>0)
   {
       d = N%10;
       N = N/10;
       if(d==2 || d==3 || d==5 || d==7)
       {
           s+=d;
       }
       else
       {
           s+=0;
       }
   }
   return s;
   }
};

2.
class Solution {
  public:
    vector<string> invIsoTriangle(int N) {
         string str="";
       vector<string> ans;
       for(int i=0;i<N;i++)
       {
           for(int j=0;j<i;j++)
           str=str+' ';
           for(int j=i;j<2*N-1-i;j++)
           str=str+'*';
           for(int j=2*N-1-i;j<2*N-i-1;j++)
           str=str+' ';
           ans.push_back(str);
           str="";
       }
       return ans;
   }
};

3. 
string isPrime(int n) {
      if(n==1){
       return "No";
   }
   for (int i = 2; i <= sqrt(n); i++) {
       if(n%i==0){
           return "No";
       }
   }
   return "Yes";
} 

4. 

























5. 
class Solution {
  public:
     bool isPrime(long long n) {
        if(n <= 1) return false;
        for(int i = 2; i*i <= n; i++) if(n%i == 0) return false;
        return true;
    }
    int hasThreePrimeFac(long long N) {
        double sr = sqrt(N);
        if((sr-floor(sr) == 0) && isPrime(int(sr))) return 1;
        return 0;
    } 
};